<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Receipt Recognition - Local Converter</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tesseract.js/4.0.2/tesseract.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        h1 { color: #333; margin-bottom: 10px; }
        .subtitle { color: #666; }
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .tabs {
            display: flex;
            background: #f5f5f5;
            border-bottom: 2px solid #e0e0e0;
        }
        .tab {
            flex: 1;
            padding: 15px;
            background: #f5f5f5;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
        }
        .tab:hover { background: #e8e8e8; }
        .tab.active {
            background: white;
            color: #667eea;
            border-bottom: 3px solid #667eea;
        }
        .tab:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .content {
            padding: 30px;
            display: none;
        }
        .content.active { display: block; }
        .upload-zone {
            border: 3px dashed #ccc;
            border-radius: 12px;
            padding: 60px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        .upload-zone:hover {
            border-color: #667eea;
            background: #f8f9ff;
        }
        .upload-icon {
            font-size: 64px;
            color: #ccc;
            margin-bottom: 20px;
        }
        textarea {
            width: 100%;
            height: 400px;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            resize: vertical;
        }
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin: 5px;
        }
        .btn-primary {
            background: #667eea;
            color: white;
        }
        .btn-primary:hover { background: #5568d3; }
        .btn-success {
            background: #48bb78;
            color: white;
        }
        .btn-success:hover { background: #38a169; }
        .btn-secondary {
            background: #718096;
            color: white;
        }
        .btn-secondary:hover { background: #4a5568; }
        .loading {
            text-align: center;
            padding: 40px;
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        .info-box {
            background: #f7fafc;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        .info-box h3 {
            margin-bottom: 15px;
            color: #2d3748;
        }
        .info-item {
            margin: 8px 0;
            font-size: 14px;
        }
        .info-label {
            font-weight: 600;
            color: #4a5568;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        th {
            background: #f7fafc;
            font-weight: 600;
            color: #2d3748;
        }
        .text-right { text-align: right; }
        .text-center { text-align: center; }
        .totals {
            background: #f0fff4;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #48bb78;
        }
        .total-row {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
            font-size: 16px;
        }
        .total-row.grand {
            font-size: 20px;
            font-weight: bold;
            padding-top: 10px;
            border-top: 2px solid #48bb78;
        }
        pre {
            background: #2d3748;
            color: #f7fafc;
            padding: 20px;
            border-radius: 8px;
            overflow-x: auto;
            max-height: 500px;
            font-size: 13px;
        }
        .preview-image {
            max-width: 100%;
            max-height: 500px;
            margin: 20px auto;
            display: block;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
        }
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üßæ Receipt Recognition System</h1>
            <p class="subtitle">Process receipts locally - your data never leaves your device</p>
        </div>

        <div class="card">
            <div class="tabs">
                <button class="tab active" id="tab0">üì§ Upload Image</button>
                <button class="tab" id="tab1">‚úçÔ∏è Text Input</button>
                <button class="tab" id="tab2" disabled>üìÑ OCR Text</button>
                <button class="tab" id="tab3" disabled>üìä Results</button>
            </div>

            <div class="content active" id="content0">
                <input type="file" id="fileInput" accept="image/*" style="display: none;">
                <div class="upload-zone" id="uploadZone">
                    <div class="upload-icon">üì∏</div>
                    <h2>Click to Upload Receipt Image</h2>
                    <p style="color: #666; margin-top: 10px;">Supports JPG, PNG, and other image formats</p>
                </div>
                <img id="preview" class="preview-image" style="display: none;">
            </div>

            <div class="content" id="content1">
                <h3 style="margin-bottom: 15px;">Paste Receipt Text</h3>
                <textarea id="textInput" placeholder="Paste your receipt text here..."></textarea>
                <button class="btn btn-primary" id="parseBtn">Parse Text</button>
            </div>

            <div class="content" id="content2">
                <h3 style="margin-bottom: 15px;">OCR Extracted Text</h3>
                <div id="loadingDiv" class="loading" style="display: none;">
                    <div class="spinner"></div>
                    <p>Processing image with OCR...</p>
                </div>
                <pre id="ocrText"></pre>
            </div>

            <div class="content" id="content3">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2>Parsed Receipt Data</h2>
                    <div>
                        <button class="btn btn-success" id="exportJSONBtn">üì• Export JSON</button>
                        <button class="btn btn-success" id="exportCSVBtn">üì• Export CSV</button>
                        <button class="btn btn-secondary" id="resetBtn">üîÑ Reset</button>
                    </div>
                </div>

                <div class="info-grid">
                    <div class="info-box">
                        <h3>Receipt Information</h3>
                        <div class="info-item"><span class="info-label">Merchant:</span> <span id="merchant">-</span></div>
                        <div class="info-item"><span class="info-label">Location:</span> <span id="location">-</span></div>
                        <div class="info-item"><span class="info-label">Date:</span> <span id="date">-</span></div>
                        <div class="info-item"><span class="info-label">Time:</span> <span id="time">-</span></div>
                        <div class="info-item"><span class="info-label">Payment:</span> <span id="payment">-</span></div>
                    </div>

                    <div class="totals">
                        <h3>Totals</h3>
                        <div class="total-row">
                            <span>Subtotal:</span>
                            <span id="subtotal">$0.00</span>
                        </div>
                        <div class="total-row">
                            <span>Tax:</span>
                            <span id="tax">$0.00</span>
                        </div>
                        <div class="total-row grand">
                            <span>Total:</span>
                            <span id="total">$0.00</span>
                        </div>
                    </div>
                </div>

                <div class="info-box">
                    <h3>Line Items (<span id="itemCount">0</span>)</h3>
                    <table id="itemsTable">
                        <thead>
                            <tr>
                                <th>Item Name</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-right">Unit Price</th>
                                <th class="text-right">Total</th>
                            </tr>
                        </thead>
                        <tbody id="itemsBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentTab = 0;
        let parsedData = null;
        let ocrText = '';

        // Initialize event listeners after DOM loads
        document.addEventListener('DOMContentLoaded', function() {
            // Tab buttons
            document.getElementById('tab0').addEventListener('click', () => switchTab(0));
            document.getElementById('tab1').addEventListener('click', () => switchTab(1));
            document.getElementById('tab2').addEventListener('click', () => switchTab(2));
            document.getElementById('tab3').addEventListener('click', () => switchTab(3));
            
            // Upload zone
            document.getElementById('uploadZone').addEventListener('click', () => {
                document.getElementById('fileInput').click();
            });
            
            document.getElementById('fileInput').addEventListener('change', handleFileUpload);
            
            // Parse button
            document.getElementById('parseBtn').addEventListener('click', parseManualText);
            
            // Export buttons
            document.getElementById('exportJSONBtn').addEventListener('click', exportJSON);
            document.getElementById('exportCSVBtn').addEventListener('click', exportCSV);
            document.getElementById('resetBtn').addEventListener('click', reset);
        });

        function switchTab(index) {
            const tabs = document.querySelectorAll('.tab');
            const contents = document.querySelectorAll('.content');
            
            tabs.forEach((tab, i) => {
                tab.classList.toggle('active', i === index);
            });
            
            contents.forEach((content, i) => {
                content.classList.toggle('active', i === index);
            });
            
            currentTab = index;
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.getElementById('preview');
                preview.src = e.target.result;
                preview.style.display = 'block';
                
                performOCR(e.target.result);
            };
            reader.readAsDataURL(file);
        }

        async function performOCR(imageData) {
            document.getElementById('tab2').disabled = false;
            switchTab(2);
            
            const loadingDiv = document.getElementById('loadingDiv');
            const ocrTextEl = document.getElementById('ocrText');
            
            loadingDiv.style.display = 'block';
            ocrTextEl.style.display = 'none';

            try {
                const result = await Tesseract.recognize(imageData, 'eng', {
                    logger: m => console.log(m)
                });
                
                ocrText = result.data.text;
                ocrTextEl.textContent = ocrText;
                ocrTextEl.style.display = 'block';
                loadingDiv.style.display = 'none';
                
                parseReceiptText(ocrText);
            } catch (error) {
                console.error('OCR Error:', error);
                alert('OCR failed. Please try the Text Input tab instead.');
                loadingDiv.style.display = 'none';
            }
        }

        function parseManualText() {
            const text = document.getElementById('textInput').value;
            if (!text.trim()) {
                alert('Please enter some text first');
                return;
            }
            
            ocrText = text;
            document.getElementById('ocrText').textContent = text;
            document.getElementById('tab2').disabled = false;
            
            parseReceiptText(text);
        }

        function parseReceiptText(text) {
            const lines = text.split('\n').map(l => l.trim()).filter(l => l.length > 0);
            
            parsedData = {
                merchant: '',
                location: '',
                date: '',
                time: '',
                items: [],
                subtotal: 0,
                tax: 0,
                total: 0,
                paymentMethod: '',
                rawText: text
            };

            // Merchant detection
            for (let i = 0; i < Math.min(5, lines.length); i++) {
                if (!parsedData.merchant && lines[i].length > 3 && lines[i].length < 50 && 
                    /^[A-Za-z\s'#-]+$/.test(lines[i])) {
                    parsedData.merchant = lines[i];
                    break;
                }
            }

            // Date and time patterns
            const datePatterns = [
                /(\d{1,2}[-\/]\d{1,2}[-\/]\d{2,4})/,
                /(\d{4}[-\/]\d{1,2}[-\/]\d{1,2})/
            ];
            const timePattern = /(\d{1,2}:\d{2}(?::\d{2})?\s*(?:AM|PM)?)/i;

            lines.forEach(line => {
                if (!parsedData.date) {
                    for (const pattern of datePatterns) {
                        const match = line.match(pattern);
                        if (match) {
                            parsedData.date = match[1];
                            break;
                        }
                    }
                }
                if (!parsedData.time) {
                    const match = line.match(timePattern);
                    if (match) parsedData.time = match[1];
                }
            });

            // Location detection
            const locationPattern = /([A-Z][a-z]+,\s*[A-Z]{2}\s+\d{5})/;
            lines.forEach(line => {
                if (!parsedData.location) {
                    const match = line.match(locationPattern);
                    if (match) parsedData.location = match[1];
                }
            });

            // Item detection
            const pricePattern = /\$?\s*(\d+\.\d{2})\s*$/;
            const quantityPattern = /^(\d+)\s+/;
            
            lines.forEach(line => {
                const lowerLine = line.toLowerCase();
                
                if (lowerLine.includes('total') || lowerLine.includes('subtotal') || 
                    lowerLine.includes('tax') || lowerLine.includes('change') ||
                    lowerLine.includes('cash') || lowerLine.includes('card') ||
                    lowerLine.includes('visa') || lowerLine.includes('payment')) {
                    return;
                }

                const priceMatch = line.match(pricePattern);
                if (priceMatch) {
                    const price = parseFloat(priceMatch[1]);
                    let itemName = line.replace(pricePattern, '').trim();
                    
                    let quantity = 1;
                    const qtyMatch = itemName.match(quantityPattern);
                    if (qtyMatch) {
                        quantity = parseInt(qtyMatch[1]);
                        itemName = itemName.replace(quantityPattern, '').trim();
                    }

                    if (itemName.length > 0 && price > 0 && price < 10000) {
                        parsedData.items.push({
                            name: itemName,
                            quantity,
                            price,
                            total: price * quantity
                        });
                    }
                }
            });

            // Extract totals
            lines.forEach(line => {
                const lowerLine = line.toLowerCase();
                const priceMatch = line.match(/(\d+\.\d{2})/);
                
                if (priceMatch) {
                    const value = parseFloat(priceMatch[1]);
                    
                    if ((lowerLine.includes('subtotal') || lowerLine.includes('sub total')) && !parsedData.subtotal) {
                        parsedData.subtotal = value;
                    } else if (lowerLine.includes('tax') && !lowerLine.includes('total') && !parsedData.tax) {
                        parsedData.tax = value;
                    } else if (lowerLine.includes('total') && !lowerLine.includes('subtotal')) {
                        if (value > parsedData.total) parsedData.total = value;
                    }
                }
            });

            // Payment method
            const paymentKeywords = ['visa', 'mastercard', 'amex', 'cash', 'card'];
            lines.forEach(line => {
                const lowerLine = line.toLowerCase();
                paymentKeywords.forEach(keyword => {
                    if (lowerLine.includes(keyword) && !parsedData.paymentMethod) {
                        parsedData.paymentMethod = keyword.charAt(0).toUpperCase() + keyword.slice(1);
                    }
                });
            });

            displayResults();
        }

        function displayResults() {
            document.getElementById('tab3').disabled = false;
            switchTab(3);

            document.getElementById('merchant').textContent = parsedData.merchant || 'N/A';
            document.getElementById('location').textContent = parsedData.location || 'N/A';
            document.getElementById('date').textContent = parsedData.date || 'N/A';
            document.getElementById('time').textContent = parsedData.time || 'N/A';
            document.getElementById('payment').textContent = parsedData.paymentMethod || 'N/A';
            
            document.getElementById('subtotal').textContent = '$' + parsedData.subtotal.toFixed(2);
            document.getElementById('tax').textContent = '$' + parsedData.tax.toFixed(2);
            document.getElementById('total').textContent = '$' + parsedData.total.toFixed(2);
            
            document.getElementById('itemCount').textContent = parsedData.items.length;
            
            const tbody = document.getElementById('itemsBody');
            tbody.innerHTML = '';
            parsedData.items.forEach(item => {
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${item.name}</td>
                    <td class="text-center">${item.quantity}</td>
                    <td class="text-right">$${item.price.toFixed(2)}</td>
                    <td class="text-right">$${item.total.toFixed(2)}</td>
                `;
            });
        }

        function exportJSON() {
            const dataStr = JSON.stringify(parsedData, null, 2);
            const blob = new Blob([dataStr], { type: 'application/json' });
            downloadFile(blob, `receipt_${Date.now()}.json`);
        }

        function exportCSV() {
            let csv = 'Merchant,Date,Time,Item,Quantity,Price,Total\n';
            parsedData.items.forEach(item => {
                csv += `"${parsedData.merchant}","${parsedData.date}","${parsedData.time}","${item.name}",${item.quantity},${item.price},${item.total}\n`;
            });
            csv += `\n"","","","Subtotal","","",${parsedData.subtotal}\n`;
            csv += `"","","","Tax","","",${parsedData.tax}\n`;
            csv += `"","","","Total","","",${parsedData.total}\n`;
            
            const blob = new Blob([csv], { type: 'text/csv' });
            downloadFile(blob, `receipt_${Date.now()}.csv`);
        }

        function downloadFile(blob, filename) {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            URL.revokeObjectURL(url);
        }

        function reset() {
            parsedData = null;
            ocrText = '';
            document.getElementById('preview').style.display = 'none';
            document.getElementById('textInput').value = '';
            document.getElementById('ocrText').textContent = '';
            document.getElementById('tab2').disabled = true;
            document.getElementById('tab3').disabled = true;
            switchTab(0);
        }
    </script>
</body>
</html>
